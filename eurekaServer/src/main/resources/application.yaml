# eureka服务端的实例名称

server:
  port: 8761

spring:
  application:
    name: eureka
eureka:
  instance:
    hostname: euk1.com
  client:
    #表示是否将自己注册到Eureka Server
    register-with-eureka: true
    #表示是否从Eureka Server获取注册的服务信息
    # false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务
    fetch-registry: false
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/${spring.application.name}/
  server:
    # 设置eureka是否启动自我保护   true指开启eureka的自我保护   false指关闭eureka的自我保护
    # 如果关闭eureka的自我保护，则不可用的服务会被及时剔除掉
    enable-self-preservation: false
    # eureka的阈值（默认值）是0.85(当注册在eureka中的正常服务占比低于85%时会开启eureka的自我保护)
    # 也就是说Eureka Server在运行期间会去统计心跳失败比例在 15 分钟之内是否低于 85%，如果低于 85%，Eureka Server 会将这些实例保护起来，让这些实例不会过期
    renewal-percent-threshold: 0.85
    # 剔除服务的时间间隔毫秒数（单位：毫秒）  扫描失效服务的时间间隔（默认是60*1000 即60秒）
    eviction-interval-timer-in-ms: 1000
    # 是否从readonly（只读缓存）中读取实例（默认是true）
    use-read-only-response-cache: false
    # 设置 readwrite 和 readonly 两级缓存的同步时间间隔
    response-cache-update-interval-ms: 1000
management:
  endpoints:
    web:
      exposure:
        include: "*"
  info:
    env:
      enabled: true
